spring.application.name=Yorijori
spring.application.front.domain=yorijori.recipes
spring.application.front.port=3000
spring.application.front.host=http://${spring.application.front.domain}:${spring.application.front.port}
spring.profiles.include=auth
# Server configuration
server.port=8070
server.forward-headers-strategy=framework
#
# Logging configuration
# logging.level.root=DEBUG
logging.level.org.hibernate=info
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
logging.level.org.springframework.security.web=trace
#
# Multi-part configuration
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
#
# Database configuration
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database=mysql
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.ddl-auto=create
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always
spring.sql.init.data-locations=classpath:/data/*.sql
spring.sql.init.continue-on-error=true
spring.datasource.url=jdbc:mysql://${spring.application.front.domain}:3306/whatthefood
#
# Security configuration
cors.allowed-origins=\
${spring.application.front.host},\
http://127.0.0.1:3000,\
http://localhost:3000
cors.allowed-methods=HEAD,GET,POST,PUT,PATH,DELETE
cors.allowed-headers=Authorization,Refresh,Content-Type,Accept,Cache-Control
## expiration time of JWT access token in milliseconds (default 30 minutes)
jwt.access-token-expiration=1800000
## expiration time of JWT refresh token in milliseconds (default 7 day)
jwt.refresh-token-expiration=604800000
#
# Mail configuration
spring.mail.port=587
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.starttls.enable=true
mail.global-replacements.home-page=${spring.application.front.host}
mail.global-replacements.logo-path=https://github.com/himedia-final-5/WhatTheFood/raw/main/client/public/images/logo.png
mail.sign-up-template.sender=verify@${spring.application.front.domain}
mail.sign-up-template.plain-file=classpath:/mail/signup.txt
mail.sign-up-template.html-file=classpath:/mail/signup.html
#
# DevTools configuration
spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=true
#
# OAuth2 configuration
oauth2.global.redirect-uri=${spring.application.front.host}/api/{action}/oauth2/code/{registrationId}
oauth2.global.response-uri=${spring.application.front.host}/login/oauth2
## google
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.client-id=${oauth2.google.client-id}
spring.security.oauth2.client.registration.google.client-secret=${oauth2.google.client-secret}
spring.security.oauth2.client.registration.google.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${oauth2.global.redirect-uri}
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://www.googleapis.com/oauth2/v3/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub
## naver
spring.security.oauth2.client.registration.naver.client-name=Naver
spring.security.oauth2.client.registration.naver.client-id=${oauth2.naver.client-id}
spring.security.oauth2.client.registration.naver.client-secret=${oauth2.naver.client-secret}
spring.security.oauth2.client.registration.naver.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=nickname,email,profile_image
spring.security.oauth2.client.registration.naver.redirect-uri=${oauth2.global.redirect-uri}
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response
## kakao
spring.security.oauth2.client.registration.kakao.client-name=Kakao
spring.security.oauth2.client.registration.kakao.client-id=${oauth2.kakao.client-id}
spring.security.oauth2.client.registration.kakao.client-secret=${oauth2.kakao.client-secret}
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image,account_email
spring.security.oauth2.client.registration.kakao.redirect-uri=${oauth2.global.redirect-uri}
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id
